!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=5)}([function(t,e,n){var o=n(1);"string"==typeof o&&(o=[[t.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(3)(o,r);o.locals&&(t.exports=o.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,"/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline; }\n\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {\n  display: block; }\n\nbody {\n  line-height: 1; }\n\nol, ul {\n  list-style: none; }\n\nblockquote, q {\n  quotes: none; }\n  blockquote:before, blockquote:after, q:before, q:after {\n    content: '';\n    content: none; }\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n\nhtml, body {\n  box-sizing: border-box; }\n\n.game-container {\n  background: grey;\n  display: inline-block;\n  border: 3px solid #666; }\n\n.board__row {\n  display: flex; }\n\n.board__item {\n  width: 35px;\n  height: 35px;\n  border-width: 2px;\n  position: relative;\n  background: #ccc;\n  border-style: inset; }\n  .board__item.covered {\n    border-style: outset;\n    background: #aaa; }\n    .board__item.covered:active {\n      border-style: inset; }\n    .board__item.covered:after {\n      content: ''; }\n  .board__item.flag {\n    background: red;\n    border-style: outset; }\n    .board__item.flag:active {\n      border-style: outset; }\n    .board__item.flag--wrong {\n      background: purple; }\n  .board__item--bomb, .board__item--flag {\n    border-style: inset; }\n  .board__item--bomb {\n    background: black; }\n  .board__item--1:after, .board__item--2:after, .board__item--3:after, .board__item--4:after, .board__item--5:after, .board__item--6:after, .board__item--7:after, .board__item--8:after {\n    font-size: 22px;\n    font-family: monospace;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-weight: 600; }\n  .board__item--1:after {\n    content: '1';\n    color: blue; }\n  .board__item--2:after {\n    content: '2';\n    color: green; }\n  .board__item--3:after {\n    content: '3';\n    color: red; }\n  .board__item--4:after {\n    content: '4';\n    color: navy; }\n  .board__item--5:after {\n    content: '5';\n    color: purple; }\n  .board__item--6:after {\n    content: '6';\n    color: cadetblue; }\n  .board__item--7:after {\n    content: '7';\n    color: black; }\n  .board__item--8:after {\n    content: '8';\n    color: grey; }\n\n.info {\n  height: 30px;\n  background: lightgrey;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px; }\n  .info__counter {\n    width: 40px;\n    height: 20px;\n    padding: 5px;\n    background: #111;\n    color: red;\n    font-family: monospace;\n    line-height: 20px;\n    font-size: 20px;\n    text-align: center;\n    border-style: inset; }\n  .info__status {\n    width: 30px;\n    height: 30px;\n    border: 2px outset;\n    background-color: gold; }\n    .info__status:active:not(.info__status--lose):not(.info__status--win) {\n      border-style: inset;\n      background-color: aquamarine; }\n    .info__status--lose {\n      background-color: black; }\n    .info__status--win {\n      background-color: green; }\n",""])},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",o=t[3];if(!o)return n;if(e&&"function"==typeof btoa){var r=(a=o,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),i=o.sources.map(function(t){return"/*# sourceURL=".concat(o.sourceRoot).concat(t," */")});return[n].concat(i).concat([r]).join("\n")}var a,s,c;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2],"{").concat(n,"}"):n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];null!=i&&(o[i]=!0)}for(var a=0;a<t.length;a++){var s=t[a];null!=s[0]&&o[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="(".concat(s[2],") and (").concat(n,")")),e.push(s))}},e}},function(t,e,n){var o,r,i={},a=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=o.apply(this,arguments)),r}),s=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var o=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,n);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(t){o=null}e[t]=o}return e[t]}}(),c=null,l=0,u=[],f=n(4);function d(t,e){for(var n=0;n<t.length;n++){var o=t[n],r=i[o.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](o.parts[a]);for(;a<o.parts.length;a++)r.parts.push(g(o.parts[a],e))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(g(o.parts[a],e));i[o.id]={id:o.id,refs:1,parts:s}}}}function b(t,e){for(var n=[],o={},r=0;r<t.length;r++){var i=t[r],a=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};o[a]?o[a].parts.push(s):n.push(o[a]={id:a,parts:[s]})}return n}function h(t,e){var n=s(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=u[u.length-1];if("top"===t.insertAt)o?o.nextSibling?n.insertBefore(e,o.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),u.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=s(t.insertAt.before,n);n.insertBefore(e,r)}}function m(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);e>=0&&u.splice(e,1)}function p(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var o=function(){0;return n.nc}();o&&(t.attrs.nonce=o)}return v(e,t.attrs),h(t,e),e}function v(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function g(t,e){var n,o,r,i;if(e.transform&&t.css){if(!(i="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=i}if(e.singleton){var a=l++;n=c||(c=p(e)),o=w.bind(null,n,a,!1),r=w.bind(null,n,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",v(e,t.attrs),h(t,e),e}(e),o=function(t,e,n){var o=n.css,r=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&r;(e.convertToAbsoluteUrls||i)&&(o=f(o));r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([o],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,e),r=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=p(e),o=function(t,e){var n=e.css,o=e.media;o&&t.setAttribute("media",o);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){m(n)});return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else r()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=b(t,e);return d(n,e),function(t){for(var o=[],r=0;r<n.length;r++){var a=n[r];(s=i[a.id]).refs--,o.push(s)}t&&d(b(t,e),e);for(r=0;r<o.length;r++){var s;if(0===(s=o[r]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete i[s.id]}}}};var y,_=(y=[],function(t,e){return y[t]=e,y.filter(Boolean).join("\n")});function w(t,e,n,o){var r=n?"":o.css;if(t.styleSheet)t.styleSheet.cssText=_(e,r);else{var i=document.createTextNode(r),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,o=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var r,i=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(t,e,n){"use strict";function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}n.r(e);var i=function t(e){var n=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;o(this,t),r(this,"init",function(){n.element.innerHTML=n.threeDigitValue(),n.setCountdown(1e3)}),r(this,"threeDigitValue",function(){return n.value<10?"00"+n.value:n.value<100?"0"+n.value:n.value}),r(this,"setCountdown",function(t){if(n.value>=999)return!1;n.countdown=setInterval(function(){n.value++,n.element.innerHTML=n.threeDigitValue(),n.value>=999&&clearInterval(n.countdown)},t)}),r(this,"stop",function(){clearInterval(n.countdown)}),r(this,"reset",function(){n.value=n.initialValue,n.stop(),n.init()}),this.element=document.querySelector(e),this.initialValue=i,this.value=i,this.countdown,this.init()};function a(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var c=function t(e,n,o,r,i,c,l){var u=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),s(this,"createBoard",function(){for(var t="",e=0;e<u.y;e++){t+="<div class='board__row'>";for(var n=0;n<u.x;n++)t+="<div class='board__item covered' data-board-item data-x=".concat(n," data-y=").concat(e,"></div>");t+="</div>"}u.element.insertAdjacentHTML("afterbegin",t),u.element.querySelectorAll(".board__row").forEach(function(t){return u.board.push(a(t.querySelectorAll(".board__item")))})}),s(this,"getBoardItems",function(){return u.boardItems=a(document.querySelectorAll(u.boardItemsSelector))}),s(this,"generateBombs",function(){for(var t=a(u.boardItems),e=0;e<u.bombs;e++){var n=Math.floor(Math.random()*t.length);t.splice(n,1)[0].classList.add(u.bombClass)}return t}),s(this,"placeNumbers",function(t){t.forEach(function(t){var e=0;u.findAdjacentElements(t.dataset.x,t.dataset.y).forEach(function(t){return t.classList.contains("board__item--bomb")&&e++}),t.classList.add(e?"board__item--".concat(e):"board__item--empty")})}),s(this,"findAdjacentElements",function(t,e){t=parseInt(t);var n=[];return(e=parseInt(e))-1>=0&&t-1>=0&&n.push(u.board[e-1][t-1]),e-1>=0&&n.push(u.board[e-1][t]),e-1>=0&&t+1<u.x&&n.push(u.board[e-1][t+1]),t-1>=0&&n.push(u.board[e][t-1]),t+1<u.x&&n.push(u.board[e][t+1]),e+1<u.y&&t-1>=0&&n.push(u.board[e+1][t-1]),e+1<u.y&&n.push(u.board[e+1][t]),e+1<u.y&&t+1<u.x&&n.push(u.board[e+1][t+1]),n}),s(this,"addClickHandleToItems",function(){u.element.addEventListener("contextmenu",u.toggleFlag),u.element.addEventListener("click",u.handleItemClick)}),s(this,"removeClickHandleToItems",function(){u.element.removeEventListener("contextmenu",u.toggleFlag),u.element.removeEventListener("click",u.handleItemClick)}),s(this,"toggleFlag",function(t){t.preventDefault();var e=t.target;e.classList.contains("covered")&&(u.handleFlagToggle(e.classList.contains("flag")?--u.flagCount:++u.flagCount),e.classList.toggle("flag"))}),s(this,"handleItemClick",function(t){t.preventDefault();var e=t.target;return!["flag"].some(function(t){return e.classList.contains(t)})&&(!!["covered"].some(function(t){return e.classList.contains(t)})&&(u.uncover(e),void u.checkWinConditions()))}),s(this,"uncover",function(t){t.classList.remove("covered"),t.classList.contains("board__item--bomb")?u.gameLose():t.classList.contains("board__item--empty")&&u.findAdjacentElements(t.dataset.x,t.dataset.y).forEach(function(t){t.classList.contains("covered")&&t.classList.contains("board__item--empty")&&u.uncover(t),t.classList.contains("flag")&&u.handleFlagToggle(--u.flagCount),t.classList.remove("covered","flag")})}),s(this,"uncoverAll",function(){u.board.forEach(function(t){return t.forEach(function(t){t.classList.contains("flag")?t.classList.contains("board__item--bomb")||t.classList.add("flag--wrong"):t.classList.remove("covered","flag")})})}),s(this,"checkWinConditions",function(){var t=!0;u.board.forEach(function(e){return e.forEach(function(e){(!e.classList.contains("board__item--bomb")&&e.classList.contains("covered")||e.classList.contains("board__item--bomb")&&!e.classList.contains("covered"))&&(t=!1)})}),t&&u.gameWon()}),s(this,"gameWon",function(){u.removeClickHandleToItems(),u.handleWin()}),s(this,"gameLose",function(){u.uncoverAll(),u.removeClickHandleToItems(),u.handleLose()}),s(this,"restart",function(){console.log("restart")}),this.element=document.querySelector(e),this.x=n,this.y=o,this.bombs=r,this.boardItemsSelector="[data-board-item]",this.bombClass="board__item--bomb",this.board=[],this.handleWin=i,this.handleLose=c,this.handleFlagToggle=l,this.flagCount=0,this.createBoard(),this.getBoardItems(),this.placeNumbers(this.generateBombs()),this.addClickHandleToItems()};function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var u=function t(e,n){var o=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),l(this,"setValue",function(){o.element.innerHTML=o.bombCount-o.flagCount}),l(this,"changeFlagCount",function(t){o.flagCount=t,o.setValue()}),this.element=document.querySelector(e),this.bombCount=n,this.flagCount=0,this.setValue()};function f(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var d=function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),f(this,"init",function(){n.element.addEventListener("click",function(){n.resetStatus(),n.resetGame()})}),f(this,"winStatus",function(){return n.element.classList.add("info__status--win")}),f(this,"loseStatus",function(){return n.element.classList.add("info__status--lose")}),f(this,"resetStatus",function(){return n.element.classList.remove("info__status--win","info__status--lose")}),this.element=document.querySelector("#status"),this.resetGame=e,this.init()};function b(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}n(0);new function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),b(this,"handleWin",function(){console.log("you won!"),e.controler.winStatus(),e.timer.stop()}),b(this,"handleLose",function(){console.log("you lose!"),e.controler.loseStatus(),e.timer.stop()}),b(this,"handleFlagToggle",function(t){e.bombCounter.changeFlagCount(t)}),b(this,"restart",function(){e.timer.reset(),e.board.restart()}),document.querySelector("#game-board").addEventListener("contextmenu",function(t){return t.preventDefault()}),this.bombCount=10,this.boardSizeX=8,this.boardSizeY=8,this.timer=new i("#timer",0),this.board=new c("#board",this.boardSizeX,this.boardSizeY,this.bombCount,this.handleWin,this.handleLose,this.handleFlagToggle),this.bombCounter=new u("#bombCounter",this.bombCount),this.controler=new d(this.restart)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,